# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: zotbinslambda
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details

# MUST UPDATE TO 3!
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  lambdaHashingVersion: 20201221
  deploymentMethod: direct
  region: us-west-2



# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: get
  bins:
    # TODO: Look into adding paths parameters to map to the path
    handler: handler.bin
    events:
      - httpApi:
          path: /bin/{uuid}
          method: get
      - httpApi:
          path: /bin/{uuid}
          method: delete
  bin:
    handler: handler.bins
    events:
      - httpApi:
          path: /bins
          method: get
      - httpApi:
          path: /bins
          method: post
  location:
    handler: handler.location
    events:
      - httpApi:
          path: /bin/{UUID}/location
          method: get
      - httpApi:
          path: /bin/{UUID}/location
          method: put
  all_fullness_metrics:
    handler: handler.all_fullness_metrics
    events:
      - httpApi:
          path: /fullness_metrics
          method: get
  all_usage_metrics:
    handler: handler.all_usage_metrics
    events:
      - httpApi:
          path: /usage_metrics
          method: get
  all_weight_metrics:
    handler: handler.all_weight_metrics
    events:
      - httpApi:
          path: /weight_metrics
          method: get
  filter_fullness_metrics:
    handler: handler.filter_fullness_metrics
    events:
      - httpApi:
          path: /fullness_metrics/{sensor_id}
          method: get
  filter_usage_metrics:
    handler: handler.filter_usage_metrics
    events:
      - httpApi:
          path: /usage_metrics/{sensor_id}
          method: get
  filter_weight_metrics:
    handler: handler.filter_weight_metrics
    events:
      - httpApi:
          path: /weight_metrics/{sensor_id}
          method: get


# # Unneeded as of right now
#   # Unneeded as fullness metric does not have uuid attribute yet
#   fullness_metrics:
#     handler: handler.fullness_metrics
#     events:
#       - httpApi:
#           path: /bin/{UUID}/fullness
#           method: get
#   # Unneeded as usage metric does not have uuid attribute yet
#   usage_metrics:
#     handler: handler.usage_metrics
#     events:
#       - httpApi:
#           path: /bin/{UUID}/usage
#           method: get
#   # Unneeded as weight metric does not have uuid attribute yet
#   weight_metrics:
#     handler: handler.weight_metrics
#     events:
#       - httpApi:
#           path: /bin/{UUID}/weight
#           method: get


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-offline
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: non-linux